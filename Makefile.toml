[config]
default_to_workspace = false

[env.aarch64]
arch = "aarch64"
board = "raspi3"
RUSTFLAGS = "-Z macro-backtrace --cfg board=\"${board}\""

[env.x86_64]
arch = "x86_64"
RUSTFLAGS = "-Z macro-backtrace"

[env.development]
arch = "x86_64"
RUSTFLAGS = "-Z macro-backtrace"

[env]
kernel_build = "target/${arch}-hakkero/debug/hakkero"
kernel_binary = "target/${arch}-hakkero/debug/hakkero.bin"
target_file = "targets/${arch}-hakkero.json"
CARGO_MANIFEST_DIR = "."

[tasks.lint-x86_64]
condition = { env = { arch = "x86_64" } }
command = "cargo"
args = ["kc64"]

[tasks.build-x86_64]
condition = { env = { arch = "x86_64" } }
install_crate = false
command = "cargo"
args = ["kb64"]

[tasks.doc-x86_64]
condition = { env = { arch = "x86_64" } }
install_crate = false
command = "cargo"
args = ["kd64"]

[tasks.test-x86_64]
condition = { env = { arch = "x86_64" } }
install_crate = false
command = "cargo"
args = ["kt64"]

[tasks.lint-aarch64]
condition = { env = { arch = "aarch64" } }
install_crate = false
command = "cargo"
args = ["kcarm"]

[tasks.build-aarch64]
condition = { env = { arch = "aarch64" } }
install_crate = false
command = "cargo"
args = ["kbarm"]

[tasks.doc-aarch64]
condition = { env = { arch = "aarch64" } }
install_crate = false
command = "cargo"
args = ["kdarm"]

[tasks.test-aarch64]
condition = { env = { arch = "aarch64" } }
install_crate = false
command = "cargo"
args = ["ktarm"]

[tasks.run]
category = "Build"
description = "Run the project using QEMU."
dependencies = [ "run-x86_64", "run-aarch64" ]

[tasks.run-x86_64]
condition = { env = { arch = "x86_64" } }
command = "qemu-system-x86_64"
args = [
 	"-drive", "format=raw,file=target/x86_64-hakkero/debug/boot-bios-hakkero.img",
 	"-device", "isa-debug-exit,iobase=0xf4,iosize=0x04",
 	"-serial", "stdio"
]
dependencies = [ "build-x86_64", "create-bootimage" ]

[tasks.run-aarch64]
condition = { env = { arch = "aarch64" }, env_set = [ "board" ] }
command = "qemu-system-aarch64"
args = [
	"-machine", "raspi3",
 	"-serial", "stdio",
 	"-display", "none",
 	"-kernel", "${kernel_binary}"
]
dependencies = [ "translate-to-binary" ]

[tasks.create-bootimage]
condition = { env = { arch = "x86_64" } }
command = "cargo"
args = [ "run", "--package", "boot" ]

[tasks.translate-to-binary]
condition = { env = { arch = "aarch64" } }
command = "rust-objcopy"
args = [ "-O", "binary", "${kernel_build}", "${kernel_binary}" ]
dependencies = [ "build-aarch64" ]

[tasks.disasm]
category = "Tools"
description = "Dissassembly the kernel build for inspection."
script_runner = "@shell"
script = [
	"rust-objdump --disassemble-all ${kernel_build} | less"
]
dependencies = [ "build-aarch64", "build-x86_64" ]

[tasks.default]
description = "Development testing flow will first format and lint the code, and then run cargo build and test"
dependencies = [ "format", "lint", "build", "test" ]
